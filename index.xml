<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pavani Majety</title>
    <link>https://pavanimajety.github.io/</link>
    <description>Recent content on Pavani Majety</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jan 2022 19:40:30 -0500</lastBuildDate><atom:link href="https://pavanimajety.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pavani Majety&#39;s Resume</title>
      <link>https://pavanimajety.github.io/resume/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pavanimajety.github.io/resume/</guid>
      <description>Work Experience (Current) Senior Deep Learning Engineer, DL Compilers, NVIDIA June 2022 - Present
Contributed to Tensorflow-TensorRT integration to generate efficient inference code for running on NVIDIA&amp;rsquo;s GPUs, utilizing the TensorRT libraries. My contributions can be found on my github account. Developing ops for a new MLIR dialect that helps convert MHLO / Stable HLO for NVIDIA GPUS with PJRT backend to XLA. (Near future) Contributions to the IREE project from NVIDIA.</description>
    </item>
    
    <item>
      <title>Installing Halide in Ubuntu/Pop OS with vcpkg</title>
      <link>https://pavanimajety.github.io/posts/halide_install/</link>
      <pubDate>Sat, 15 Jan 2022 19:40:30 -0500</pubDate>
      
      <guid>https://pavanimajety.github.io/posts/halide_install/</guid>
      <description>Instructions from Halide blogs
Install cmake if your don&amp;rsquo;t have it already. Download the precompiled binaries from: https://cmake.org/download/
If you prefer installing from the source, follow the instructions on the page.
The second step is to install halide with vcpkg. Run the following command once you have installed vcpkg. xxx@xxx-os:~$ ./vcpkg/vcpkg install halide:x64-linux After some log ..
Total elapsed time: 55.61 min
The package halide provides CMake targets:
set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_STANDARD_REQUIRED YES) set(CMAKE_CXX_EXTENSIONS NO) find_package(Halide REQUIRED) # JIT mode: add_executable(my_halide_app main.</description>
    </item>
    
    <item>
      <title>Halide</title>
      <link>https://pavanimajety.github.io/posts/halide_dsl/</link>
      <pubDate>Sat, 15 Jan 2022 11:29:43 -0500</pubDate>
      
      <guid>https://pavanimajety.github.io/posts/halide_dsl/</guid>
      <description>Sources: Halide Cpp Con 2020 1 Martin Fowler Internal DSLs 2
Let&amp;rsquo;s talk domain specific languages.. If you don&amp;rsquo;t know about these, let&amp;rsquo;s just say domain specific languages are programming languages that are specialized and restricted to best meet the needs of a specific domain. The goal of a DSL is exploit those restrictions for faster performance, easier maintenance, safety guarentees and so on. The most popular one most of you all know is HTML &amp;ndash; short for HyperText Markup Language.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pavanimajety.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pavanimajety.github.io/about/</guid>
      <description>Pavani Majety Summary Hello! I am Pavani(pronunced: Pah-vuh-nee). I work as a Deep Learning Engineer on the Tensorflow/Frameworks team at NVIDIA. I previously worked as a Software Engineer at Mathworks. I work on generating optimized code for different DL frameworks like Tensorflow, JAX etc to run on NVIDIA&amp;rsquo;s GPU targets . I enjoy working with Compilers and Deep/Machine Learning. I like experimenting with Natural Language Processing, and Graph Machine Learning to generate Compilers and Autoschedulers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pavanimajety.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pavanimajety.github.io/projects/</guid>
      <description>Projects Incremental Smoothing and Mapping on UMich’s Long Term Dataset’s 2D Lidar Data C++, MATLAB
Spearhead the development effort of our implementation iSAM in C++. Benchmarked our implementation of iSAM with GaTech’s implementation with 2D Lidar data from Victoria Park Dataset and UMLT dataset. Face-swapping app OpenCV, Python and DLib
Developed a CV algorithm that uses Offline landmark recognition based face-detection algorithms, Image stitchingand color morphing techniques to swap and superimpose faces.</description>
    </item>
    
  </channel>
</rss>
